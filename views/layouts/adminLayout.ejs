<!DOCTYPE html>
<html>
<head>
    <link rel="icon" href="data:image/svg+xml,<svg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'><rect width='100' height='100' rx='15' fill='%232271b1'/><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' font-family='Arial, sans-serif' font-size='40' fill='%23ffffff'>TIA</text></svg>" type="image/svg+xml">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="/css/dark-mode.css">
    <link rel="stylesheet" type="text/css" href="/css/dataTables.dataTables.min.css">
    <link rel="stylesheet" href="/css/sweetalert2.min.css"> <!-- SweetAlert2 CSS -->
    <link href="/css/alpaca.min.css" rel="stylesheet" />
    <%- block('pageStyles') %>
</head>
<body>
    <div class="topbar">
        <div class="topbar-left">
            <h2 class="project-name">TarjetasIA</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" style="background-color: transparent; padding: 0;">
                    <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page"><%= currentPage %></li>
                </ol>
            </nav>
        </div>
        <div class="topbar-right">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="darkModeSwitch">
                <label class="form-check-label" for="darkModeSwitch">Dark Mode</label>
            </div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="30px" height="30px" class="rounded-circle user-avatar" id="userAvatar">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <a href="/logout" class="btn btn-outline-danger btn-sm">Salir</a>
        </div>
    </div>

    <div id="user-sidebar" class="user-sidebar">
        <div class="sidebar-header">
            <h3>Perfil de Usuario</h3>
            <button id="close-user-sidebar" class="close-button">&times;</button>
        </div>
        <div class="sidebar-body">
            <div id="user-avatar-image-container" class="text-center mb-3">
                <!-- El avatar se insertará aquí por JS si existe avatar_url -->
            </div>
            <p><strong>Usuario:</strong> <span id="user-username-display"></span></p>
            <p><strong>Nombre:</strong> <span id="user-name-display"></span></p>
            <p><strong>Correo:</strong> <span id="user-email-display"></span></p>
            <p><strong>Teléfono:</strong> <span id="user-phone-display"></span></p>
            <p><strong>Rol:</strong> <span id="user-role-display"></span></p>
            <p><strong>Tokens Usados:</strong> <span id="user-tokens-used-display"></span></p>
            <p><strong>URL Perfil:</strong> <a id="user-profile-url-display" href="#" target="_blank"></a></p>
            <p><strong>Miembro desde:</strong> <span id="user-created-at-display"></span></p>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-2 d-none d-md-block bg-light sidebar">
                <div class="sidebar-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="/admin">
                                Panel
                            </a>
                        </li>
                        <!-- <li class="nav-item">
                            <a class="nav-link" href="/admin/clientes">
                                Clientes
                            </a>
                        </li> -->
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/ventas">
                                Ventas
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/previsualizador">
                                Previsualizador
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/multimedia">
                                Multimedia
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/configuracion">
                                Configuración
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>
            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4">
                <%- body %>
            </main>
        </div>
    </div>
    <script type="text/javascript" src="/js/jquery.min.js"></script>
    <script type="text/javascript" src="/js/dataTables.core.js"></script>
    <script type="text/javascript" src="/js/dataTables.dataTables.min.js"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>
    <script src="/js/sweetalert2.all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>
    <script src="/js/alpaca.min.js"></script>
    <script>
        const darkModeSwitch = document.getElementById('darkModeSwitch');
        const body = document.body;

        // Check for saved preference in localStorage
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            body.classList.add('dark-mode');
            darkModeSwitch.checked = true;
        }

        darkModeSwitch.addEventListener('change', () => {
            if (darkModeSwitch.checked) {
                body.classList.add('dark-mode');
                localStorage.setItem('theme', 'dark');
            } else {
                body.classList.remove('dark-mode');
                localStorage.setItem('theme', 'light');
            }
        });

        // User Sidebar
        const userAvatar = document.getElementById('userAvatar'); // El SVG de la topbar
        const userSidebar = document.getElementById('user-sidebar');
        const closeUserSidebarButton = document.getElementById('close-user-sidebar');
        
        // Elementos de la Sidebar
        const userNameDisplay = document.getElementById('user-name-display');
        const userEmailDisplay = document.getElementById('user-email-display');
        const userUsernameDisplay = document.getElementById('user-username-display');
        const userPhoneDisplay = document.getElementById('user-phone-display');
        const userRoleDisplay = document.getElementById('user-role-display');
        const userTokensUsedDisplay = document.getElementById('user-tokens-used-display');
        const userProfileUrlDisplay = document.getElementById('user-profile-url-display');
        const userCreatedAtDisplay = document.getElementById('user-created-at-display');
        const userAvatarImageContainer = document.getElementById('user-avatar-image-container');


        // Acceder a los datos del usuario pasados desde el servidor vía res.locals.currentUser
        // El middleware en app.js se encarga de poblar currentUser (que será null o un objeto)
        var currentUser = null; // Inicializar por si acaso
        try {
            // JSON.stringify(currentUser) producirá una cadena JSON (ej. '{"name":"admin"}' o 'null')
            // EJS lo imprimirá. Las comillas simples lo hacen una cadena JS. JSON.parse lo convierte a objeto/null.
            currentUser = JSON.parse('<%- JSON.stringify(currentUser) %>');
        } catch (e) {
            console.error('Error parsing currentUser data:', e);
            currentUser = {}; // Fallback a objeto vacío en caso de error de parseo
        }
        
        if (currentUser && Object.keys(currentUser).length > 0) {
            if (userNameDisplay) {
                if (currentUser.first_name || currentUser.last_name) {
                    userNameDisplay.textContent = `${currentUser.first_name || ''} ${currentUser.last_name || ''}`.trim();
                } else if (currentUser.username) {
                    userNameDisplay.textContent = currentUser.username; // Fallback si no hay nombre/apellido
                } else {
                    userNameDisplay.textContent = 'N/A';
                }
            }
            if (userEmailDisplay) userEmailDisplay.textContent = currentUser.email || 'N/A';
            if (userUsernameDisplay) userUsernameDisplay.textContent = currentUser.username || 'N/A';
            if (userPhoneDisplay) userPhoneDisplay.textContent = currentUser.phone || 'N/A';
            if (userRoleDisplay) userRoleDisplay.textContent = currentUser.role || 'N/A';
            if (userTokensUsedDisplay) userTokensUsedDisplay.textContent = currentUser.tokens_used !== undefined ? currentUser.tokens_used.toString() : '0';
            
            if (userProfileUrlDisplay && currentUser.profile_slug) {
                const profileUrl = `/${currentUser.profile_slug}`; // Asumiendo que las rutas de perfil son /:slug
                userProfileUrlDisplay.href = profileUrl;
                userProfileUrlDisplay.textContent = profileUrl;
            } else if (userProfileUrlDisplay) {
                userProfileUrlDisplay.textContent = 'N/A';
                userProfileUrlDisplay.removeAttribute('href');
            }

            if (userCreatedAtDisplay && currentUser.created_at) {
                try {
                    userCreatedAtDisplay.textContent = new Date(currentUser.created_at).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
                } catch (e) {
                    userCreatedAtDisplay.textContent = currentUser.created_at; // Mostrar tal cual si hay error de formato
                }
            } else if (userCreatedAtDisplay) {
                userCreatedAtDisplay.textContent = 'N/A';
            }

            if (userAvatarImageContainer && currentUser.avatar_url) {
                const img = document.createElement('img');
                img.src = currentUser.avatar_url;
                img.alt = 'Avatar';
                img.style.width = '80px'; // Ajusta el tamaño como prefieras
                img.style.height = '80px';
                img.classList.add('rounded-circle', 'mb-2');
                userAvatarImageContainer.innerHTML = ''; // Limpiar por si acaso
                userAvatarImageContainer.appendChild(img);
            } else if (userAvatarImageContainer) {
                 // Podrías poner un avatar genérico si no hay URL
                userAvatarImageContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="80px" height="80px" class="rounded-circle mb-2" style="opacity:0.5;"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>';
            }

        } else { // Si no hay currentUser o está vacío
            const fieldsToClear = [userNameDisplay, userEmailDisplay, userUsernameDisplay, userPhoneDisplay, userRoleDisplay, userTokensUsedDisplay, userCreatedAtDisplay];
            fieldsToClear.forEach(field => {
                if (field) field.textContent = 'N/A';
            });
            if (userProfileUrlDisplay) {
                userProfileUrlDisplay.textContent = 'N/A';
                userProfileUrlDisplay.removeAttribute('href');
            }
            if (userAvatarImageContainer) {
                userAvatarImageContainer.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="80px" height="80px" class="rounded-circle mb-2" style="opacity:0.5;"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>';
            }
        }

        userAvatar.addEventListener('click', () => {
            userSidebar.classList.toggle('show');
        });

        closeUserSidebarButton.addEventListener('click', () => {
            userSidebar.classList.remove('show');
        });

        // Set active class on sidebar menu
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.sidebar .nav-link');

        navLinks.forEach(link => {
            link.classList.remove('active'); // Remove active class from all links
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('active'); // Add active class to the current page's link
            }
        });
    </script>
    <%- block('pageScripts') %>
</body>
</html>
