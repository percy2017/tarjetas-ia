<% layout('layouts/adminLayout') %>

<!-- <h2>Gestión de Multimedia</h2> -->

<div class="progress" style="display: none;">
    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
</div>

<form action="/admin/multimedia/upload" method="post" enctype="multipart/form-data" class="row g-3 align-items-center">
    <div class="col"> <!-- Search input column - changed to col for flexible width -->
        <input type="text" id="mediaSearchInput" class="form-control" placeholder="Buscar por nombre de archivo...">
    </div>
    <div class="col-auto"> <!-- File input -->
        <label for="multimediaFiles" class="form-label visually-hidden">Seleccionar archivos:</label>
        <input class="form-control" type="file" id="multimediaFiles" name="multimediaFiles" multiple>
    </div>
    <div class="col-auto"> <!-- Submit button -->
        <button type="submit" class="btn btn-primary">Subir</button>
    </div>
</form>
<!-- Removed the separate div for search input as it's now in the form row -->

<div id="multimedia-list" class="mt-4">
    <div class="row multimedia-grid">
        <% files.forEach(function(file) { %>
            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 mb-3 multimedia-grid-item-wrapper">
                <div class="card multimedia-card multimedia-grid-item" data-filename="<%= file.filename %>" data-mimetype="<%= file.mimeType %>">
                    <div class="multimedia-thumbnail-container">
                        <% if (file.mimeType.startsWith('image/')) { %>
                            <img src="/uploads/<%= file.filename %>" class="multimedia-thumbnail" alt="<%= file.filename %>">
                        <% } else if (file.mimeType.startsWith('video/') || file.mimeType.includes('mp4')) { %>
                            <video class="multimedia-thumbnail" preload="metadata">
                                <source src="/uploads/<%= file.filename %>#t=0.1" type="<%= file.mimeType.startsWith('video/') ? file.mimeType : 'video/mp4' %>">
                                Your browser does not support the video tag.
                            </video>
                             <div class="video-play-icon"><i class="fas fa-play"></i></div>
                        <% } else if (file.mimeType === 'application/pdf') { %>
                            <div class="multimedia-thumbnail-generic d-flex align-items-center justify-content-center">
                                <i class="fas fa-file-pdf fa-3x text-danger"></i> <!-- PDF icon, text-danger for red color -->
                            </div>
                        <% } else { %>
                            <div class="multimedia-thumbnail-generic d-flex align-items-center justify-content-center">
                                <i class="fas fa-file fa-3x text-muted"></i> <!-- Generic file icon -->
                            </div>
                        <% } %>
                    </div>
                    <div class="multimedia-filename">
                        <small><%= file.filename %></small>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>
</div>

<div id="multimedia-sidebar" class="multimedia-sidebar">
    <div class="sidebar-header">
        <h4>Detalles</h4>
        <button id="close-sidebar" class="close-button">&times;</button>
    </div>
    <div class="sidebar-body">
        <div id="sidebar-preview-container" class="mb-3">
            <!-- La previsualización se insertará aquí por JS -->
        </div>
        <p><strong>Nombre del archivo:</strong> <span id="sidebar-filename"></span></p>
        <p><strong>URL pública:</strong> <span id="sidebar-url"></span></p>
        <button class="btn btn-secondary btn-sm" id="copy-url">Copiar URL</button>
    </div>
</div>

<script>
    const multimediaCards = document.querySelectorAll('.multimedia-card');
    const multimediaSidebar = document.getElementById('multimedia-sidebar');
    const closeSidebarButton = document.getElementById('close-sidebar');
    const sidebarPreviewContainer = document.getElementById('sidebar-preview-container'); // Changed ID
    const sidebarFilename = document.getElementById('sidebar-filename');
    const sidebarUrl = document.getElementById('sidebar-url');
    const copyUrlButton = document.getElementById('copy-url');

    multimediaCards.forEach(card => {
        card.addEventListener('click', () => {
            const filename = card.dataset.filename;
            const mimeType = card.dataset.mimetype;
            const fileUrl = `/uploads/${filename}`;
            const fullUrl = `${window.location.origin}${fileUrl}`; // Construct full URL

            console.log('Clicked file:', filename);
            console.log('MIME type:', mimeType);
            console.log('File URL:', fileUrl);
            console.log('Full URL:', fullUrl);

            sidebarFilename.textContent = filename;
            sidebarUrl.textContent = fullUrl; // Display full URL

            // Clear previous preview content
            sidebarPreviewContainer.innerHTML = ''; // Clear the container

            let previewElement;

            if (mimeType.startsWith('image/')) {
                console.log('Creating image preview');
                previewElement = document.createElement('img');
                previewElement.src = fileUrl;
                previewElement.alt = 'Vista previa';
                previewElement.classList.add('img-fluid', 'mb-3');
            } else if (mimeType.startsWith('video/') || mimeType.includes('mp4') || mimeType.includes('ogg') || mimeType.includes('webm')) {
                console.log('Creating video preview');
                previewElement = document.createElement('video');
                previewElement.controls = true;
                previewElement.preload = 'metadata'; // Added preload
                previewElement.classList.add('img-fluid'); // mb-3 will be on the container
                const source = document.createElement('source');
                source.src = fileUrl; // #t=0.1 was removed here, which is correct for playback
                // Adjust source.type for video playback in sidebar
                if (mimeType.startsWith('video/')) {
                    source.type = mimeType;
                } else if (mimeType.includes('mp4')) {
                    source.type = 'video/mp4'; // Force video/mp4 for application/mp4
                } else if (mimeType.includes('ogg')) {
                    source.type = 'video/ogg';
                } else if (mimeType.includes('webm')) {
                    source.type = 'video/webm';
                } else {
                    source.type = mimeType; // Fallback
                }
                previewElement.appendChild(source);
            } else if (mimeType === 'application/pdf') {
                console.log('Creating PDF preview');
                previewElement = document.createElement('iframe');
                previewElement.src = fileUrl;
                previewElement.style.width = '100%';
                previewElement.style.height = '300px';
            } else {
                console.log('Creating generic file icon preview');
                previewElement = document.createElement('div');
                previewElement.classList.add('d-flex', 'align-items-center', 'justify-content-center');
                previewElement.style.height = '150px';
                previewElement.style.backgroundColor = '#e9ecef';
                previewElement.innerHTML = '<i class="fas fa-file fa-3x text-muted"></i>';
            }

            if (previewElement) { // Ensure previewElement was created
                sidebarPreviewContainer.appendChild(previewElement); // Append to the container
            }

            multimediaSidebar.classList.add('show');
        });
    });

    closeSidebarButton.addEventListener('click', () => {
        multimediaSidebar.classList.remove('show');
    });

    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            multimediaSidebar.classList.remove('show');
        }
    });

    copyUrlButton.addEventListener('click', () => {
        const urlToCopy = sidebarUrl.textContent;
        navigator.clipboard.writeText(urlToCopy).then(() => {
            Swal.fire({
                icon: 'success',
                title: 'URL copiada',
                text: 'La URL pública se ha copiado al portapapeles.',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000
            });
        }).catch(err => {
            console.error('Error al copiar la URL:', err);
            Swal.fire({
                icon: 'error',
                title: 'Error al copiar',
                text: 'No se pudo copiar la URL al portapapeles.',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000
            });
        });
    });

    // Script para la búsqueda de multimedia
    const searchInput = document.getElementById('mediaSearchInput');
    const mediaItemWrappers = document.querySelectorAll('.multimedia-grid-item-wrapper');

    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();

        mediaItemWrappers.forEach(itemWrapper => {
            const card = itemWrapper.querySelector('.multimedia-card');
            if (card) { // Asegurarse de que la tarjeta exista
                const filename = card.dataset.filename.toLowerCase();
                if (filename.includes(searchTerm)) {
                    itemWrapper.style.display = ''; // Mostrar
                } else {
                    itemWrapper.style.display = 'none'; // Ocultar
                }
            }
        });
    });
</script>
